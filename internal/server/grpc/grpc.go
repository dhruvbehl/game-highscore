package grpc

import (
	"context"
	"math"

	"net"

	pbhighscore "github.com/dhruvbehl/game-apis/game-highscore/v1"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"google.golang.org/grpc"
)

// Create struct to implement the GameServer interface in game-apis service
type Grpc struct {
	address string
	server  *grpc.Server
}

// Initial max possible highscore
var HighScore = math.MaxFloat64

// Constructor method to create new Grpc server
func NewServer(address string) *Grpc {
	return &Grpc{address: address}
}

/*
Summary: Implementation of SetHighScore of GameServer interface in game-apis service using the Grpc type as receiver.
Input: context, *SetHighScoreRequest
Output: *SetHighScoreResponse, error

SetHighScoreRequest: autogenerated type that is a combination of params from proimpl message generation package
and highscore field that needs to be set by the client.

SetHighScoreResponse: autogenerated type that is a combination of params from proimpl message generation package
and set field that shows the client that the highscore set was a success.
*/
func (g *Grpc) SetHighScore(ctx context.Context, input *pbhighscore.SetHighScoreRequest) (*pbhighscore.SetHighScoreResponse, error) {
	log.Info().Msg("setHighScore in game-highscore service")
	HighScore = input.HighScore
	return &pbhighscore.SetHighScoreResponse{
		Set: true,
	}, nil
}

/*
Summary: Implementation of GetHighScore of GameServer interface in game-apis service using the Grpc type as receiver.
Input: context, *GetHighScoreRequest
Output: *GetHighScoreResponse, error

GetHighScoreRequest: autogenerated type that is a combination of params from proimpl message generation package.

GetHighScoreResponse: autogenerated type that is a combination of params from proimpl message generation package
and and highscore field as a response to the client request.
*/
func (g *Grpc) GetHighScore(ctx context.Context, input *pbhighscore.GetHighScoreRequest) (*pbhighscore.GetHighScoreResponse, error) {
	log.Info().Msg("getHighScore in game-highscore service")
	return &pbhighscore.GetHighScoreResponse{
		HighScore: HighScore,
	}, nil
}

/*
Summary: ListenAndServe function is used to start the gRPC server, the function creates a tcp port on the Grpc type server
address and uses the grpc package to initiate a gRPC server.
1. Get `listener` from given `address`
2. Register the server
3. Serve on the `listener`
Input: nil
Output: error
*/
func (g *Grpc) ListenAndServe() error {
	listener, err := net.Listen("tcp", g.address)
	if err != nil {
		return errors.Wrap(err, "Failed to initialize tcp port")
	}

	serverOpts := []grpc.ServerOption{}
	g.server = grpc.NewServer(serverOpts...)

	pbhighscore.RegisterGameServer(g.server, g)

	log.Info().Str("address", g.address).Msg("Initializing gRPC server for game-highscore service")

	err = g.server.Serve(listener)
	if err != nil {
		return errors.Wrap(err, "Failed to initialize gRPC server for game-highscore service")
	}
	return nil
}
